FORMAT: 1A
HOST: http://127.0.0.1:8080

# Docks

Docks API

# Group Authentication
## Tokens [/api/auth/token]

### Token Payload
```
{
  "username": "<username>"
}
```

### Request new JWT [POST]
Request a new JWT for use in Authenticated requests

+ Request (application/json)

        {
            "username": "admin",
            "password": "admin"
        }

+ Response 200 (application/json)
    Valid credentials

    + Body

            {
                "jwt": "8HhsbJ86AFjjhzj.ASKI9ghA7778ah.blahlbalhlb"
            }

+ Response 401 (application/json)
    Invalid credentials

    + Body

            {
                "message": "Invalid username or password"
            }

# Group User Management
## User Collection [/users]

### Get All Users [GET]
Returns all users in the database.

+ Response 200 (application/json)

    + Body

            {
                "data": [
                    {
                        "username": "bob"
                    },
                    {
                        "username": "john"
                    }
                ]
            }

### Create User [POST]
Create a new user

+ Attributes
    + username (string)
    + password (string)

+ Request (application/json)

        {
            "username": "fred",
            "password": "pass",
        }

+ Response 200
+ Response 409
    Username already exists

    + Body

## User [/users/{username}]

+ Parameters
    + username (string) - The username used to login

### Update User [PUT]

+ Attributes
    + password (string, optional)

+ Request (application/json)

        {
            "password": "BetterPass333"
        }

+ Response 200
+ Response 404
    User does not exist

    + Body

### Delete User [DELETE]
Delete a user from the system

+ Response 200
+ Response 404
    User does not exist

    + Body

# Group Docker Stacks
## Stack Collection [/stacks]
### List Stacks [GET]
Get all stacks running in the Swarm

+ Attributes
    + data (array)
        + (object)
            + stackName (string, required) - The unique name for the stack
            + servicesCount (number, required) - The number of services running in the stack
            
+ Response 200 (application/json)

        {
            "data": [
                {
                    "name": "docks-api",
                    "servicesCount": 3
                },
                {
                    "name": "docks-ui",
                    "servicesCount": 1
                }
            ]
        }

### Deploy New Stack [POST]
Deploy a new stack to the Swarm. The stack name should not exist

+ Request (application/json)

    + Attributes
        + stackName (string, required) - Unique stack name
        + stackFile (string, required) - Base64 encoded docker-compose file

    + Body

            {
                "stackName": "docks-api",
                "stackFile": "IyBEZXBsb3kgdG...V09SRD1leGFtcGxl"
            }

+ Response 200
+ Response 409
    Stack name already exists

    + Body

## Stack [/stacks/{stackName}]
+ Parameters
    + stackName (string) - The unique stack name

### Update Existing Stack [PUT]

+ Attributes
    + stackName (string, required) - Unique stack name
    + stackFile (string, required) - Base64 encoded docker-compose file

+ Request (application/json)

        {
            "stackName": "docks-api",
            "stackFile": "IyBEZXBsb3kgdG...V09SRD1leGFtcGxl"
        }

+ Response 200
+ Response 404
    Stack name does not exist

    + Body

### Remove Stack [DELETE]

+ Response 200
+ Response 404
    Stack does not exist

    + Body

### Get Services in Stack [GET /stacks/{stackName}/services]
+ Parameters
    + stackName (string) - The unique stack name

+ Attributes
    + data (array)
        + (object)
            + id (string) - Service id
            + name (string) - Service name
            + mode (string) - Service mode
            + replicas (string)
            + image (string)
            + ports (string)

+ Response 200 (application/json)

        {
            "data": [
                {
                    "id": "kr07iblu94sl",
                    "name": "docks-db_db",
                    "mode": "replicated",
                    "replicas": "1/1",
                    "image": "postgres:latest",
                    "ports": "*:5432->5432/tcp"

                }
            ]
        }

### Get Tasks in Stack [GET /stacks/{stackName}/tasks]
+ Parameters
    + stackName (string) - The unique stack name

+ Attributes
    + data (array)
        + (object)
            + id (string)
            + name (string)
            + image (string)
            + node (string)
            + desiredState (string)
            + currentState (string)
            + error (string, optional)
            + ports (string, optional)

+ Response 200 (application/json)

        {
            "data": [
                {
                    "id": "pqgf55qat18q6gl1m8nbl4bxh",
                    "name": "docks-db_db.1",
                    "image": "postgres:latest@sha256:d99f15cb8d0f47f0a6...4d1e25acb66ccf7bd7bd8479",
                    "node": "leonidas",
                    "desiredState": "Shutdown",
                    "currentState": "Failed about an hour ago",
                    "error": "starting container failed: Address already in use"
                }
            ]
        }

    
+ Response 404
    Stack does not exist

    + Body

# Group Docker
## Proxy [/docker]
All requests to the `/docker` endpoint will be forwarded to the Docker API

### List Services [GET /docker/services]

+ Request

    + Headers

            Authorization: Bearer <jwt>

+ Response 200 (application/json)
+ Response 406
+ Response 500

